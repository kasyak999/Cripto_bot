import os
import math
from pprint import pprint
from sqlalchemy import select, update
import time
from app.config import session, logger
from app.db import sessionDB, Coin
from app.service import balance_coin, get_info_coin
from app.orders import (
    add_coin_order, list_orders, delete_coin_order, status_coin_order)


# –ü—Ä–æ—Ü–µ–Ω—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—É—Ü–ø–∫–∏ -5% (-5% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.95)
PROCENT_BUY = float(os.getenv('PROCENT_BUY', '0.95'))
# –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ +5% (+5% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.05)
PROCENT_SELL = float(os.getenv('PROCENT_SELL', '1.05'))
# USDT –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å—Å—è –º–æ–Ω–µ—Ç–∞
BUY_USDT = float(os.getenv('BUY_USDT', '5.05'))


def get_balance():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç"""
    response = session.get_wallet_balance(accountType="UNIFIED")
    response = response['result']['list'][0]['coin']
    if not response:
        print('üíº –í –ø–æ—Ä—Ç—Ñ–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–æ–Ω–µ—Ç.')
        return
    result = 'üí∞ –í–∞—à –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—å:\n'
    for value in response:
        result += (
            f'''
            -------- ü™ô  {value['coin']} --------
            üîπ –ë–∞–ª–∞–Ω—Å: {value['walletBalance']}
            üíµ –û—Ü–µ–Ω–∫–∞ –≤ USD: {value['usdValue']}
            '''
        )
        # pprint(coin)
    print(result)


def get_add_coin(symbol):
    """–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É"""
    symbol = symbol.upper() + 'USDT'
    ticker = get_info_coin(session, symbol)
    if not ticker:
        return

    balance = balance_coin(session, symbol)
    if not balance:
        return

    result = sessionDB.execute(
        select(Coin).where(Coin.name == symbol)
    ).scalars().first()

    if result is None:
        balance = (
            math.floor(
                float(balance['walletBalance']) * 10**ticker['base_precision']))
        balance = balance / 10**ticker['base_precision']

        new_coin = Coin(
            name=symbol,
            balance=balance,
        )
        sessionDB.add(new_coin)
        sessionDB.commit()
        logger.info(f'‚úÖ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    else:
        print(f'{symbol} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')


def list_coins():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    result = sessionDB.execute(
        select(Coin)).scalars().all()
    if not result:
        print('üì¶ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã.')
        return
    result_log = 'üìä –ú–æ–Ω–µ—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n'
    for coin in result:
        average_price = f'{coin.average_price:.8f}' if coin.average_price else None
        buy_price = f'{coin.buy_price:.8f}' if coin.buy_price else None
        sell_price = f'{coin.sell_price:.8f}' if coin.sell_price else None
        buy_order_id = '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚õîÔ∏è' if not coin.buy_order_id else '–≤ —Ä–∞–±–æ—Ç–µ üîÑ'
        sell_order_id = '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚õîÔ∏è' if not coin.sell_order_id else '–≤ —Ä–∞–±–æ—Ç–µ üîÑ'
        result_log += f'''
        -------- ü™ô  {coin.name} --------
        üÜî id: {coin.id}
        {Coin.__table__.columns.balance.doc}: {coin.balance:.8f}
        {Coin.__table__.columns.purchase_price.doc}: {coin.purchase_price:.8f}
        {Coin.__table__.columns.average_price.doc}: {average_price}
        {Coin.__table__.columns.buy_price.doc}: {buy_price}
        {Coin.__table__.columns.sell_price.doc}: {sell_price}
        {Coin.__table__.columns.count_buy.doc}: {coin.count_buy}
        {Coin.__table__.columns.buy_order_id.doc}: {buy_order_id}
        {Coin.__table__.columns.sell_order_id.doc}: {sell_order_id}
        '''
    print(result_log)


def get_delete_coin(id_coin):
    """ –£–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö """
    result = sessionDB.execute(
        select(Coin).where(Coin.id == id_coin)
    ).scalars().first()
    if result is None:
        print(
            f"‚ùå –ú–æ–Ω–µ—Ç—ã —Å id {id_coin}, –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    delete_coin_order(session, result.name)
    logger.info(f"{result.name} - –º–æ–Ω–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    sessionDB.delete(result)
    sessionDB.commit()


def get_update_coin(id_coin, param, multiply):
    """ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö """
    multiply = 5 if not multiply else multiply
    result = sessionDB.execute(
        select(Coin).where(Coin.id == id_coin)
    ).scalars().first()
    if result is None:
        print(
            f"‚ùå –ú–æ–Ω–µ—Ç—ã —Å id {id_coin}, –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    if param:
        ticker = get_info_coin(session, result.name)
        if result.purchase_price == 0:
            result.average_price = param
        else:
            result.average_price = (result.average_price + param) / 2

        result.purchase_price = param
        result.buy_price = round(param * PROCENT_BUY, ticker['priceFilter'])
        result.sell_price = round(
            result.average_price * PROCENT_SELL, ticker['priceFilter'])
        result.count_buy = multiply
    else:
        print('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É: -p 100')
        return
    sessionDB.commit()
    print(f'‚úÖ –ú–æ–Ω–µ—Ç–∞ {result.name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')


def add_order(id_coin):
    """ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ """
    result = sessionDB.execute(
        select(Coin).where(Coin.id == id_coin)
    ).scalars().first()

    if result is None:
        print(
            f"‚ùå –ú–æ–Ω–µ—Ç—ã —Å id {id_coin}, –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    delete_coin_order(session, result.name)
    ticker = get_info_coin(session, result.name)

    add_coin_order(
        session, result.name, result.balance,
        result.sell_price, 'Sell')  # –ø—Ä–æ–¥–∞–∂–∞

    qty_buy = round(
        result.count_buy / result.buy_price,
        ticker['base_precision'])
    add_coin_order(
        session, result.name, qty_buy,
        result.buy_price, 'Buy')  # –ø–æ–∫—É–ø–∫–∞

    orders = list_orders(session, result.name)
    buy_order_id = next(
        (i['orderId'] for i in orders if i['side'] == 'Buy'), None)
    sell_order_id = next(
        (i['orderId'] for i in orders if i['side'] == 'Sell'), None)

    result.buy_order_id = buy_order_id if buy_order_id else None
    result.sell_order_id = sell_order_id if sell_order_id else None
    sessionDB.commit()


def get_bot_start():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    result = sessionDB.execute(
        select(Coin).where(Coin.sell_order_id.is_not(None))
    ).scalars().all()

    for coin in result:
        orders = status_coin_order(session, coin.name)
        status_buy = next((
            i[str(coin.buy_order_id)] for i in orders
            if str(coin.buy_order_id) in i
        ), None)
        status_sell = next((
            i[str(coin.sell_order_id)] for i in orders
            if str(coin.sell_order_id) in i
        ), None)

        if status_buy == 'Filled':
            print('–æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω')
        if status_sell == 'Filled':
            print('–æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω')
        time.sleep(1)

        print(coin.name)
        print(status_sell)
        print(status_buy)
        print()
